<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | BUCHSTABE]]></title>
  <link href="http://buchstabe.gitlab.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://buchstabe.gitlab.io/"/>
  <updated>2017-08-21T18:39:57+02:00</updated>
  <id>http://buchstabe.gitlab.io/</id>
  <author>
    <name><![CDATA[Buchstabe Team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adding ignored files with Git]]></title>
    <link href="http://buchstabe.gitlab.io/blog/2014-02-12/adding-ignored-files-with-git/"/>
    <updated>2014-02-12T13:09:00+01:00</updated>
    <id>http://buchstabe.gitlab.io/blog/2014-02-12/adding-ignored-files-with-git</id>
    <content type="html"><![CDATA[<p>Today I&rsquo;ve encountered the problem adding files within a LaTeX project. All generated PDF files are ignored in the project <code>.gitignore</code>:</p>

<p><code>bash .gitignore
*.pdf
</code></p>

<p>I had to add two PDF files with graphics and didn&rsquo;t want to change my ingnoring rules:</p>

<p>```bash Adding ignored files with Git
$ git add -f file1.pdf file2.pdf</p>

<p>```</p>

<p>The <code>-f</code> switch forces Git to add ignored files. Use it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deleting files from a Git repository]]></title>
    <link href="http://buchstabe.gitlab.io/blog/2013-07-13/deleting-files-from-a-git-repository/"/>
    <updated>2013-07-13T15:28:00+02:00</updated>
    <id>http://buchstabe.gitlab.io/blog/2013-07-13/deleting-files-from-a-git-repository</id>
    <content type="html"><![CDATA[<p>Suppose you have been working for a long time on a project, and now you want to delete some files from you project because &hellip; (the reason does not really matter at this point).</p>

<p>You may want to completely erase a file or a whole directory from your repository. The file or directory may be kept in the local copy or deleted as well.</p>

<p>If you want a complete removal use <tt>git rm</tt>:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Complete removal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git rm file_to_delete.rb
</span><span class='line'><span class="nv">$ </span><span class="c"># file_to_delete.rb removed from both your working copy and repository tree.</span>
</span><span class='line'><span class="nv">$ </span>git rm -r directory_to_delete
</span><span class='line'><span class="nv">$ </span><span class="c"># directory_to removed from both your working copy and repository tree.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you want to keep your local copy use <tt>git rm &mdash;cached</tt>.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Retaining local copy </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git rm &amp;mdash;cached file_to_delete.rb
</span><span class='line'><span class="nv">$ </span><span class="c"># file_to_delete.rb removed only from repository tree.</span>
</span><span class='line'><span class="nv">$ </span>git rm &amp;mdash;cached -r directory_to_delete
</span><span class='line'><span class="nv">$ </span><span class="c"># directory_to removed only from your repository tree.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In the latter case don&rsquo;t forget to add the file or directory to your <tt>.gitignore</tt> file, otherwise <em>Git</em> will bother you with annoying status messages.</p>

<p>One last thing you should keep in mind is that erasing data from a repository means only that the information is not present in the actual commit and in all future incarnations of the code. The data can be restored from the previous states of your repository. If you want to wipe your sensitive data consider reading the appropriate <a href="https://help.github.com/articles/remove-sensitive-data">GitHub Help page</a> on this topic.</p>
]]></content>
  </entry>
  
</feed>
